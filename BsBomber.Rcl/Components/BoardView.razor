@using System.Globalization
@using BsBomber.Core.Model
@using BsBomber.Contracts
<div>
    <svg width="@(Board.Width*CellOuterSize)" height="@(Board.Height*CellOuterSize)">
        @for (var y = 0; y < Board.Height; y++)
        {
            for (var x = 0; x < Board.Width; x++)
            {
                var coordinate = new CoordinateDto(x, y);
                <rect @key="@($"board_{x}_{y}")" x="@GetSvgX(coordinate)" y="@GetSvgY(coordinate)" width="@CellSize" height="@CellSize" fill="#c0c0c0"></rect>
            }
        }

        @* Miny *@
        @foreach (var food in Board.Mines)
        {
            <circle class="food" cx="@(GetSvgX(food)+CellSize/2)" cy="@(GetSvgY(food)+CellSize/2)" r="@(CellSize/2)" fill="green"></circle>
        }

        @* Bomby *@
        @foreach (var bomb in Board.Bombs)
        {
            <circle class="fire" cx="@(GetSvgX(bomb.Position)+CellSize/2)" cy="@(GetSvgY(bomb.Position)+CellSize/2)" r="@(CellSize/2)" fill="black"></circle>
        }

        @* Exploze *@
        @foreach (var fire in Board.Fires)
        {
            var alpha = Math.Max(0, Math.Min(255, ((fire.Intensity + 1) * 255) / (Board.MaximumFireIntensity + 1)));
            var color = $"rgba(255, 165, 0, {(alpha / 255.0).ToString(CultureInfo.InvariantCulture)})";
            <circle class="fire" cx="@(GetSvgX(fire.Position) + CellSize / 2)" cy="@(GetSvgY(fire.Position) + CellSize / 2)" r="@(CellSize / 2)" fill="@color"></circle>
        }

        @* BombeÅ™i *@
        @foreach (var bomber in Board.Bombers.OrderBy(s => s.Alive ? 1 : 0))
        {
            var css = bomber.Alive ? "alive" : "dead";
            <circle class="bomber head @css" cx="@(GetSvgX(bomber.Position)+CellSize/2)" cy="@(GetSvgY(bomber.Position)+CellSize/2)" r="@(CellSize/2)" fill="@bomber.Color"></circle>
        }

    </svg>
</div>


@code
{
    private const int CellSize = 40;
    private const int CellPadding = 1;
    private const int CellOuterSize = CellSize + CellPadding;

    [Parameter, EditorRequired]
    public required BoardDto Board { get; set; }

    [Parameter, EditorRequired]
    public required Game Game { get; set; }

    private int GetSvgX(CoordinateDto coordinate)
    {
        var result = coordinate.X * CellOuterSize;
        return result;
    }

    private int GetSvgY(CoordinateDto coordinate)
    {
        var result = (Board.Height-1) * CellOuterSize - coordinate.Y * CellOuterSize;
        return result;
    }
}
